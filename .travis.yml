branches:
  except:
  - "/^untagged/"
language: rust
rust:
- stable
cache: cargo

# All Rust build architectures are defined here
matrix:
  include:
  - env: TARGET=i686-unknown-linux-gnu
    os: linux
    addons:
      apt:
        packages:
          - pkg-config
          - libssl-dev
          - gcc-multilib
        update: true
  - env: TARGET=x86_64-unknown-linux-gnu
    os: linux
    addons:
      apt:
        packages:
          - pkg-config
          - libssl-dev
          - gcc-multilib
        update: true
  - env: TARGET=i686-unknown-linux-musl
    os: linux
    addons:
      apt:
        packages:
          - pkg-config
          - libssl-dev
          - musl-tools
        update: true
  - env: TARGET=x86_64-unknown-linux-musl
    os: linux
    addons:
      apt:
        packages:
          - pkg-config
          - libssl-dev
          - musl-tools
        update: true
  - env: TARGET=i686-apple-darwin
    os: osx
    osx_image: xcode8
  - env: TARGET=x86_64-apple-darwin
    os: osx
    osx_image: xcode8
  - env: TARGET=x86_64-pc-windows-msvc
    os: windows
  - env:
    - TARGET=armv7-unknown-linux-gnueabihf
    - LINKER=arm-linux-gnueabihf-gcc
    os: linux
    addons:
      apt:
        packages: &armhf
          - pkg-config
          - libssl-dev
          - gcc-arm-linux-gnueabihf
          - libc6-armhf-cross
          - libc6-dev-armhf-cross
        update: true

install:
  - export PKG_CONFIG_ALLOW_CROSS=1
  - export PATH="$PATH:$HOME/.cargo/bin"
  - rustup target add $TARGET || true
  - |
    if [ -n "$LINKER" ]; then
      mkdir -p ~/.cargo
      echo >> ~/.cargo/config
      echo "[target.$TARGET]" >> ~/.cargo/config
      echo "linker = \"$LINKER\"" >> ~/.cargo/config
      echo "cargo config is now \n" $(cat ~/.cargo/config)
    fi
    
# This is th script that will be run on each matrix element
script:
  - |
    if [ $TARGET = "x86_64-unknown-linux-gnu" ]; then
      cargo test
    fi
  - cargo build --target $TARGET --verbose --release

before_deploy:
  - mkdir -p target/executable
  - cp target/release/rrss2imap target/executable/rrss2imap-${TARGET}


# Once the Rust packages are built, here they are deployed
deploy:
  provider: releases
  api_key:
    secure: H+nkik3V7FtxBSRl5XeQe4Cw47sZO9cQKS0OL7IVaEVF7NM2SGUTW7t26O2C/FR35tdDkb7lQd0MFQTu2azPrHpFLbdFkQdvr7iBoHBtWb9T+WV0Xyv32H/1w6I1A0cp6VSH4UCWFjuV68OzXIbmRJgcQJ1TJPxNFY+2hddx8Z4RXIggqTnfImsplrVT7wB8xWotzyv8KD1kMa7XaoDQHXODEcQnBfc3dU7JcAP0wH/+2IG69mxEQQvDvfOY0yizCi3eqY4DiBcD8ECtySmrcgnt+l7KiPoTSKKbKn2s6qAnUjPvvRYIDyxtGEnSwPDmwUUbqqhZiUoC94Ic+d8zTJjti2qW63VX9FQn7PTbm3MawTY8PCh9aY4OlVgSbO31gvFNwlIABqKGlK7+9vt9Dc6L6thCVtGlorhockeMvq2u2iJBTB6VmobSplIk+O3YyWcvnKsnSPbSSxjDozS8MnX0qm26756X2yWmn79TYto8DIMK0XAZBzyO2NJRuFOoLw9MIT1TeWhIPASIhRA60Fl7fueUn8u3fodODoAEp6GYCiMufRxiwc7Lp8QQmpTis6uV0q0dQBD/1mpypLQsZQU247UT6CfPWOE7X6X12ai93+w1/NBjSttgW5IxET2fCZX5Qj10g4yQ2Zi7U7/bcIAAS2dmA6vAHj6MBNV/2zo=
  file_glob: true
  file: target/executable/*
  skip_cleanup: true
  overwrite: true
  # This way, the release is not directly visible
  draft: true
  # Release name on body
  name: "$TRAVIS_TAG"
  # Body is created by git journal !
#  body: "$JOURNAL"
  on:
    repo: Riduidel/rrss2imap
    tags: true
